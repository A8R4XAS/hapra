$date
  Fri Dec 11 15:24:25 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module decoder24_tb $end
$var reg 2 ! i[1:0] $end
$var reg 4 " y[3:0] $end
$scope module decoder $end
$var reg 2 # i[1:0] $end
$var reg 4 $ y[3:0] $end
$var reg 2 % not_i[1:0] $end
$var reg 3 & a_out1[2:0] $end
$var reg 3 ' a_out2[2:0] $end
$var reg 3 ( a_out3[2:0] $end
$var reg 3 ) a_out4[2:0] $end
$scope module not_output0 $end
$var reg 1 * input $end
$var reg 1 + not_result $end
$var reg 1 , not_gate $end
$upscope $end
$scope module not_output1 $end
$var reg 1 - input $end
$var reg 1 . not_result $end
$var reg 1 / not_gate $end
$upscope $end
$scope module and_output1 $end
$var reg 1 0 input1 $end
$var reg 1 1 input2 $end
$var reg 1 2 and_result $end
$var reg 1 3 and_gate $end
$upscope $end
$scope module and_output2 $end
$var reg 1 4 input1 $end
$var reg 1 5 input2 $end
$var reg 1 6 and_result $end
$var reg 1 7 and_gate $end
$upscope $end
$scope module and_output3 $end
$var reg 1 8 input1 $end
$var reg 1 9 input2 $end
$var reg 1 : and_result $end
$var reg 1 ; and_gate $end
$upscope $end
$scope module and_output4 $end
$var reg 1 < input1 $end
$var reg 1 = input2 $end
$var reg 1 > and_result $end
$var reg 1 ? and_gate $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00 !
b0001 "
b00 #
b0001 $
b11 %
bUUU &
bUUU '
bUUU (
bUUU )
0*
1+
1,
0-
1.
1/
10
11
12
13
14
05
06
07
08
19
0:
0;
0<
0=
0>
0?
#10000000
b01 !
b0010 "
b01 #
b0010 $
b10 %
1*
0+
0,
01
02
03
15
16
17
09
1=
#20000000
b10 !
b0100 "
b10 #
b0100 $
b01 %
0*
1+
1,
1-
0.
0/
00
11
04
05
06
07
18
19
1:
1;
1<
0=
#30000000
b11 !
b1000 "
b11 #
b1000 $
b00 %
1*
0+
0,
01
15
09
0:
0;
1=
1>
1?
#40000000
